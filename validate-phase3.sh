#!/bin/bash
#
# @path validate-phase3.sh  
# @description Script de validation compl√®te Phase 3 avec tests et v√©rifications
#

set -e # Arr√™ter le script en cas d'erreur

echo "======================================================"
echo "    VALIDATION PHASE 3 - FINALISATION DES DONN√âES    "
echo "======================================================"
echo

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${YELLOW}‚û§ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

# Variables
CURRENT_DIR=$(pwd)
MYSQL_CONTAINER="gc-db"
BACKEND_DIR="gestion-commerciale-backend"

# V√©rifier qu'on est dans le bon r√©pertoire
if [[ ! -d "$BACKEND_DIR" ]]; then
    print_error "R√©pertoire $BACKEND_DIR non trouv√©. √ätes-vous √† la racine du projet ?"
    exit 1
fi

cd "$BACKEND_DIR"

# √âtape 1: V√©rification de l'environnement
print_step "1. V√©rification de l'environnement..."

if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    exit 1
fi

if [[ ! -f "./mvnw" ]]; then
    print_error "Maven Wrapper non trouv√©"
    exit 1
fi

print_success "Environnement OK"

# √âtape 2: Compilation et g√©n√©ration MapStruct
print_step "2. Compilation et g√©n√©ration des mappers..."

./mvnw clean compile -q
if [[ $? -ne 0 ]]; then
    print_error "Erreur de compilation"
    exit 1
fi

print_success "Compilation r√©ussie"

# √âtape 3: Tests unitaires
print_step "3. Ex√©cution des tests unitaires..."

./mvnw test -q -Dtest="!*IntegrationTest"
if [[ $? -ne 0 ]]; then
    print_error "√âchec des tests unitaires"
    exit 1
fi

print_success "Tests unitaires r√©ussis"

# √âtape 4: D√©marrage de la base de donn√©es
print_step "4. D√©marrage de MySQL..."

cd ..
docker-compose down -v &> /dev/null
docker-compose up -d db

# Attendre que MySQL soit pr√™t
echo -n "Attente de MySQL"
COUNTER=0
MAX_WAIT=60
until docker exec $MYSQL_CONTAINER mysqladmin ping -h localhost --silent 2>/dev/null; do
    if [[ $COUNTER -gt $MAX_WAIT ]]; then
        print_error "MySQL n'a pas d√©marr√© dans les temps"
        docker-compose logs db
        exit 1
    fi
    echo -n "."
    sleep 2
    COUNTER=$((COUNTER+2))
done
echo
print_success "MySQL d√©marr√©"

cd "$BACKEND_DIR"

# √âtape 5: Validation des migrations Flyway
print_step "5. Test des migrations Flyway..."

./mvnw flyway:migrate -Dspring.profiles.active=dev -q
if [[ $? -ne 0 ]]; then
    print_error "Erreur lors des migrations Flyway"
    exit 1
fi

print_success "Migrations Flyway r√©ussies"

# V√©rifier le statut des migrations
echo "Statut des migrations :"
./mvnw flyway:info -Dspring.profiles.active=dev -q | grep -E "^\|.*\|.*\|.*\|.*\|$" | head -10

# √âtape 6: Tests d'int√©gration
print_step "6. Tests d'int√©gration..."

./mvnw test -q -Dtest="*IntegrationTest"
if [[ $? -ne 0 ]]; then
    print_error "√âchec des tests d'int√©gration"
    exit 1
fi

print_success "Tests d'int√©gration r√©ussis"

# √âtape 7: Test de d√©marrage complet de l'application
print_step "7. Test d√©marrage application compl√®te..."

cd ..
docker-compose down &> /dev/null
docker-compose up -d

# Attendre que l'application d√©marre
echo -n "Attente de l'application"
COUNTER=0
MAX_WAIT=120
until curl -s http://localhost:8080/actuator/health &> /dev/null; do
    if [[ $COUNTER -gt $MAX_WAIT ]]; then
        print_error "L'application n'a pas d√©marr√© dans les temps"
        echo "Logs de l'application :"
        docker-compose logs backend | tail -50
        docker-compose down
        exit 1
    fi
    echo -n "."
    sleep 3
    COUNTER=$((COUNTER+3))
done
echo
print_success "Application d√©marr√©e"

# √âtape 8: Tests des endpoints API
print_step "8. Tests des endpoints API..."

# Test endpoint de sant√©
HEALTH_RESPONSE=$(curl -s http://localhost:8080/actuator/health)
if [[ $HEALTH_RESPONSE == *"UP"* ]]; then
    print_success "Health check OK"
else
    print_error "Health check √©chou√©"
    echo "Response: $HEALTH_RESPONSE"
fi

# Test endpoint Swagger
if curl -s http://localhost:8080/v3/api-docs &> /dev/null; then
    print_success "Documentation API accessible"
else
    print_error "Documentation API non accessible"
fi

# Test authentification
AUTH_RESPONSE=$(curl -s -u admin:admin123 http://localhost:8080/api/customers/stats)
if [[ $AUTH_RESPONSE == *"total"* ]]; then
    print_success "Authentification API OK"
else
    print_error "Authentification API √©chou√©e"
fi

# √âtape 9: V√©rification de la base de donn√©es
print_step "9. V√©rification de la base de donn√©es..."

# V√©rifier les tables cr√©√©es
TABLES_COUNT=$(docker exec $MYSQL_CONTAINER mysql -u root -proot gc_dev -e "SHOW TABLES;" -s | wc -l)
if [[ $TABLES_COUNT -ge 5 ]]; then
    print_success "Tables cr√©√©es ($TABLES_COUNT tables)"
else
    print_error "Nombre de tables insuffisant ($TABLES_COUNT)"
fi

# V√©rifier les donn√©es de seed
CUSTOMERS_COUNT=$(docker exec $MYSQL_CONTAINER mysql -u root -proot gc_dev -e "SELECT COUNT(*) FROM customers;" -s)
if [[ $CUSTOMERS_COUNT -ge 1 ]]; then
    print_success "Donn√©es de seed pr√©sentes ($CUSTOMERS_COUNT clients)"
else
    print_error "Donn√©es de seed manquantes"
fi

# V√©rifier les s√©quences
SEQUENCES_COUNT=$(docker exec $MYSQL_CONTAINER mysql -u root -proot gc_dev -e "SELECT COUNT(*) FROM sequences;" -s)
if [[ $SEQUENCES_COUNT -ge 5 ]]; then
    print_success "S√©quences initialis√©es ($SEQUENCES_COUNT s√©quences)"
else
    print_error "S√©quences manquantes"
fi

# √âtape 10: Nettoyage
print_step "10. Nettoyage..."
docker-compose down &> /dev/null
print_success "Environnement nettoy√©"

# R√©sum√© final
echo
echo "======================================================"
echo -e "${GREEN}    ‚úì PHASE 3 VALID√âE AVEC SUCC√àS !${NC}"
echo "======================================================"
echo
echo "üéØ Fonctionnalit√©s valid√©es :"
echo "   ‚Ä¢ Mod√®le de donn√©es complet (Customer, Address, Product, Sequence)"
echo "   ‚Ä¢ Migrations Flyway fonctionnelles"
echo "   ‚Ä¢ Services m√©tier avec logique business"
echo "   ‚Ä¢ APIs REST s√©curis√©es"
echo "   ‚Ä¢ Tests d'int√©gration passants"
echo "   ‚Ä¢ Documentation API g√©n√©r√©e"
echo
echo "üöÄ Prochaines √©tapes :"
echo "   ‚Ä¢ Phase 4: Internationalisation (i18n FR/EN)"
echo "   ‚Ä¢ Phase 5: UX avec HTMX/Alpine.js"
echo "   ‚Ä¢ Phase 6: Modules m√©tier (Catalogue, Ventes, Facturation)"
echo
echo "üìã Ressources disponibles :"
echo "   ‚Ä¢ API Documentation : http://localhost:8080/swagger-ui.html"
echo "   ‚Ä¢ Health Check     : http://localhost:8080/actuator/health"
echo "   ‚Ä¢ Base de donn√©es  : mysql://localhost:3306/gc_dev (root/root)"
echo
echo "Pour d√©marrer l'application :"
echo "   docker-compose up -d"

cd "$CURRENT_DIR"
